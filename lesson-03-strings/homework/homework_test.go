package main

import (
	"reflect"
	"testing"
	"unsafe"

	"github.com/stretchr/testify/assert"
)

/*
	–ò–¥–µ—è –ø–æ–¥—Ö–æ–¥–∞¬†copy-on-write¬†–∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—â–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö –±—É—Ñ—Ñ–µ—Ä–∞,
	–Ω–æ –≤ —Å–ª—É—á–∞–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö¬†‚Äî —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö –±—É—Ñ—Ñ–µ—Ä–∞.

	–î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª—è–µ–º—ã–π —Å—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ (refs *int):
	- –µ—Å–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±—É—Ñ—Ñ–µ—Ä–∞ –∫—Ç–æ-—Ç–æ –µ—â–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ—Ç –±—É—Ñ—Ñ–µ—Ä,
	  	—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –±—É—Ñ—Ñ–µ—Ä–∞,
	  	–∏–∑–º–µ–Ω–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –∏ —Ç–æ–ª—å–∫–æ –∑–∞—Ç–µ–º –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
	- –µ—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –±—É—Ñ—Ñ–µ—Ä, —Ç–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –±—É—Ñ—Ñ–µ—Ä–∞ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö

	–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –µ—â–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±—É—Ñ—Ñ–µ—Ä–∞ –≤ —Å—Ç—Ä–æ–∫—É –±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
	–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏.
*/

type COWBuffer struct {
	data []byte
	refs *int
}

func NewCOWBuffer(data []byte) COWBuffer {
	refs := 1
	return COWBuffer{
		data: data,
		refs: &refs,
	}
}

func (b *COWBuffer) Clone() COWBuffer {
	*b.refs++
	return *b
}

func (b *COWBuffer) Close() {
	*b.refs--
}

func (b *COWBuffer) Update(index int, value byte) bool {
	if index < 0 || index > len(b.data)-1 {
		return false
	}

	if *b.refs > 1 {
		newData := make([]byte, len(b.data))
		copy(newData, b.data)
		b.Close()
		*b = NewCOWBuffer(newData)
	}

	b.data[index] = value
	return true
}

func (b *COWBuffer) String() string {
	if len(b.data) == 0 {
		return ""
	}

	return unsafe.String(unsafe.SliceData(b.data), len(b.data))
}

func TestCOWBuffer(t *testing.T) {
	data := []byte{'a', 'b', 'c', 'd'}
	buffer := NewCOWBuffer(data)
	defer buffer.Close()

	copy1 := buffer.Clone()
	copy2 := buffer.Clone()

	assert.Equal(t, unsafe.SliceData(data), unsafe.SliceData(buffer.data))
	assert.Equal(t, unsafe.SliceData(buffer.data), unsafe.SliceData(copy1.data))
	assert.Equal(t, unsafe.SliceData(copy1.data), unsafe.SliceData(copy2.data))

	assert.True(t, (*byte)(unsafe.SliceData(data)) == unsafe.StringData(buffer.String()))
	assert.True(t, (*byte)(unsafe.StringData(buffer.String())) == unsafe.StringData(copy1.String()))
	assert.True(t, (*byte)(unsafe.StringData(copy1.String())) == unsafe.StringData(copy2.String()))

	assert.True(t, buffer.Update(0, 'g'))
	assert.False(t, buffer.Update(-1, 'g'))
	assert.False(t, buffer.Update(4, 'g'))

	assert.True(t, reflect.DeepEqual([]byte{'g', 'b', 'c', 'd'}, buffer.data))
	assert.True(t, reflect.DeepEqual([]byte{'a', 'b', 'c', 'd'}, copy1.data))
	assert.True(t, reflect.DeepEqual([]byte{'a', 'b', 'c', 'd'}, copy2.data))

	assert.NotEqual(t, unsafe.SliceData(buffer.data), unsafe.SliceData(copy1.data))
	assert.Equal(t, unsafe.SliceData(copy1.data), unsafe.SliceData(copy2.data))

	copy1.Close()

	previous := copy2.data
	copy2.Update(0, 'f')
	current := copy2.data

	// 1 reference - don't need to copy buffer during update
	assert.Equal(t, unsafe.SliceData(previous), unsafe.SliceData(current))

	copy2.Close()
}

func TestCOWBufferEmptyData(t *testing.T) {
	// –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	buffer := NewCOWBuffer([]byte{})
	defer buffer.Close()

	assert.Equal(t, "", buffer.String())
	assert.False(t, buffer.Update(0, 'a'))
	assert.False(t, buffer.Update(-1, 'a'))

	copy1 := buffer.Clone()
	defer copy1.Close()
	assert.Equal(t, "", copy1.String())
}

func TestCOWBufferNilData(t *testing.T) {
	// –¢–µ—Å—Ç —Å nil –¥–∞–Ω–Ω—ã–º–∏
	buffer := NewCOWBuffer(nil)
	defer buffer.Close()

	assert.Equal(t, "", buffer.String())
	assert.False(t, buffer.Update(0, 'a'))

	copy1 := buffer.Clone()
	defer copy1.Close()
	assert.Equal(t, "", copy1.String())
}

func TestCOWBufferMultipleUpdates(t *testing.T) {
	// –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	data := []byte{'a', 'b', 'c'}
	buffer := NewCOWBuffer(data)
	defer buffer.Close()

	copy1 := buffer.Clone()
	copy2 := buffer.Clone()
	defer copy1.Close()
	defer copy2.Close()

	// –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –±—É—Ñ–µ—Ä
	assert.True(t, buffer.Update(0, 'x'))
	assert.Equal(t, "xbc", buffer.String())
	assert.Equal(t, "abc", copy1.String())

	// –í—Ç–æ—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π –±—É—Ñ–µ—Ä
	oldData := unsafe.SliceData(buffer.data)
	assert.True(t, buffer.Update(1, 'y'))
	newData := unsafe.SliceData(buffer.data)
	assert.Equal(t, oldData, newData)
	assert.Equal(t, "xyc", buffer.String())
}

func TestCOWBufferChainedClones(t *testing.T) {
	// –¢–µ—Å—Ç —Ü–µ–ø–æ—á–∫–∏ –∫–ª–æ–Ω–æ–≤
	original := NewCOWBuffer([]byte{'a', 'b', 'c'})
	defer original.Close()

	// –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É –∫–ª–æ–Ω–æ–≤
	clone1 := original.Clone()
	clone2 := clone1.Clone()
	clone3 := clone2.Clone()
	defer clone1.Close()
	defer clone2.Close()
	defer clone3.Close()

	// –í—Å–µ –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –æ–¥–Ω–∏ –¥–∞–Ω–Ω—ã–µ
	assert.Equal(t, unsafe.SliceData(original.data), unsafe.SliceData(clone1.data))
	assert.Equal(t, unsafe.SliceData(clone1.data), unsafe.SliceData(clone2.data))
	assert.Equal(t, unsafe.SliceData(clone2.data), unsafe.SliceData(clone3.data))

	// –°—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 4
	assert.Equal(t, 4, *original.refs)
}

func TestCOWBufferUpdateBoundaryIndices(t *testing.T) {
	// –¢–µ—Å—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
	buffer := NewCOWBuffer([]byte{'a', 'b', 'c', 'd', 'e'})
	defer buffer.Close()

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
	assert.True(t, buffer.Update(0, 'x'))
	assert.Equal(t, byte('x'), buffer.data[0])

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
	assert.True(t, buffer.Update(4, 'z'))
	assert.Equal(t, byte('z'), buffer.data[4])

	// –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
	assert.False(t, buffer.Update(5, 'w'))
	assert.False(t, buffer.Update(-1, 'w'))
	assert.False(t, buffer.Update(100, 'w'))
}

func TestCOWBufferReferenceCountAfterClose(t *testing.T) {
	// –¢–µ—Å—Ç —Å—á–µ—Ç—á–∏–∫–∞ —Å—Å—ã–ª–æ–∫ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
	buffer := NewCOWBuffer([]byte{'a', 'b', 'c'})

	copy1 := buffer.Clone()
	copy2 := buffer.Clone()

	assert.Equal(t, 3, *buffer.refs)

	buffer.Close()
	assert.Equal(t, 2, *copy1.refs)

	copy1.Close()
	assert.Equal(t, 1, *copy2.refs)

	// –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å refs=1 –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
	oldData := unsafe.SliceData(copy2.data)
	copy2.Update(0, 'x')
	assert.Equal(t, oldData, unsafe.SliceData(copy2.data))

	copy2.Close()
	assert.Equal(t, 0, *copy2.refs)
}

func TestCOWBufferLargeData(t *testing.T) {
	// –¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	largeData := make([]byte, 10000)
	for i := range largeData {
		largeData[i] = byte(i % 256)
	}

	buffer := NewCOWBuffer(largeData)
	defer buffer.Close()

	copy1 := buffer.Clone()
	defer copy1.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
	assert.Equal(t, unsafe.SliceData(buffer.data), unsafe.SliceData(copy1.data))

	// –û–±–Ω–æ–≤–ª—è–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–ª—Å—è –Ω–æ–≤—ã–π –±—É—Ñ–µ—Ä
	buffer.Update(5000, 255)
	assert.Equal(t, byte(255), buffer.data[5000])
	assert.Equal(t, byte(5000%256), copy1.data[5000])
}

func TestCOWBufferStringConversion(t *testing.T) {
	// –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Å—Ç—Ä–æ–∫—É –±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
	data := []byte("Hello, World!")
	buffer := NewCOWBuffer(data)
	defer buffer.Close()

	str := buffer.String()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ
	strData := unsafe.StringData(str)
	sliceData := (*byte)(unsafe.SliceData(buffer.data))
	assert.Equal(t, sliceData, strData)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
	assert.Equal(t, "Hello, World!", str)
}

func TestCOWBufferSpecialCharacters(t *testing.T) {
	// –¢–µ—Å—Ç —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –∏ UTF-8
	data := []byte("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! üåç")
	buffer := NewCOWBuffer(data)
	defer buffer.Close()

	copy1 := buffer.Clone()
	defer copy1.Close()

	assert.Equal(t, "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! üåç", buffer.String())
	assert.Equal(t, buffer.String(), copy1.String())

	// –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–π—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ UTF-8 —Å–∏–º–≤–æ–ª–∞ (–º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)
	buffer.Update(0, 'H')
	assert.NotEqual(t, buffer.String(), copy1.String())
}

func TestCOWBufferConcurrentClones(t *testing.T) {
	// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–ª–æ–Ω–æ–≤
	original := NewCOWBuffer([]byte{'a', 'b', 'c'})
	defer original.Close()

	clones := make([]COWBuffer, 100)
	for i := range clones {
		clones[i] = original.Clone()
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫
	assert.Equal(t, 101, *original.refs)

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–æ–Ω—ã
	for i := range clones {
		clones[i].Close()
	}

	assert.Equal(t, 1, *original.refs)
}

func TestCOWBufferUpdateAfterAllClonesGone(t *testing.T) {
	// –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª–æ–Ω–æ–≤
	buffer := NewCOWBuffer([]byte{'a', 'b', 'c'})

	// –°–æ–∑–¥–∞–µ–º –∏ —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–æ–Ω—ã
	for i := 0; i < 5; i++ {
		clone := buffer.Clone()
		clone.Close()
	}

	// refs –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1
	assert.Equal(t, 1, *buffer.refs)

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–ø–∏—é
	oldData := unsafe.SliceData(buffer.data)
	buffer.Update(1, 'x')
	assert.Equal(t, oldData, unsafe.SliceData(buffer.data))

	buffer.Close()
}
